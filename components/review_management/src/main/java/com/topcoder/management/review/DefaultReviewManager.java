/*
 * Copyright (C) 2006 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.management.review;

import com.topcoder.management.review.data.Comment;
import com.topcoder.management.review.data.CommentType;
import com.topcoder.management.review.data.Review;

import com.topcoder.search.builder.filter.Filter;
import com.topcoder.util.config.Property;


/**
 * <p>
 * This <code>DefaultReviewManager</code> class is the default implementation of
 * <code>{@link ReviewManager}</code>.  It actually delegates the work to the pluggable persistence to
 * create, update and search review entities. The review entity ids will be generated by the inner
 * persistence class. Additionally, It can also be used to add comment for review and item,  and
 * get all the comment types from the manager.
 * </p>
 *
 * <p>
 * Thread safety: This class is not required to be thread-safe.
 * </p>
 *
 * <p>
 * A sample configuration file is shown here:
 * <pre>
 * &lt;CMConfig&gt;
 *     &lt;Config name="com.topcoder.management.review.DefaultReviewManager"&gt;
 *         &lt;Property name="persistence"&gt;
 *             &lt;Property name="persistence_class"&gt;
 *                 &lt;Value&gt;
 *                 com.topcoder.management.review.persistence.InformixReviewPersistence
 *                 &lt;/Value&gt;
 *             &lt;/Property&gt;
 *             &lt;Property name="persistence_namespace"&gt;
 *                 &lt;Value&gt;
 *                 com.topcoder.management.review.persistence.InformixReviewPersistence
 *                 &lt;/Value&gt;
 *             &lt;/Property&gt;
 *         &lt;/Property&gt;
 *     &lt;/Config&gt;
 * &lt;/CMConfig&gt;
 * </pre>
 * </p>
 *
 * <p>Examples of usage of <code>DefaultReviewManager</code> :
 * <pre>
 *      // create a manager instance from default namespace.
 *      manager = new DefaultReviewManager();
 *
 *      // create a review into the manager.
 *      manager.createReview(new Review(1001), "createReviewer");
 *
 *      // update the review in the manager.
 *      Review updatedReview = new Review(1001);
 *      updatedReview.addItem(new Item(1));
 *      manager.updateReview(updatedReview, "updateReviewer");
 *
 *      // get the review from manager with its id.
 *      Review getReview = manager.getReview(1001);
 *
 *      // get all comment types from manager.
 *      CommentType[] commentTypes = manager.getAllCommentTypes();
 *
 *      // add comment for review in manager.
 *      Comment reviewComment = new Comment(1, 10001, "good");
 *      manager.addReviewComment(1001, reviewComment, "someReviewer");
 *
 *      // add comment for item in manager.
 *      Comment itemComment = new Comment(1, 10001, "ok");
 *      manager.addReviewComment(1, itemComment, "someReviewer");
 *
 *      // search for the reviews which have been committed.
 *      Filter filter = new EqualToFilter("committed", new Integer(1));
 *      Review[] reviews = manager.searchReviews(filter, true);
 *
 *      // search for the reviews which have been committed and reviewer id is 10000.
 *      ChainFilter cf = new ChainFilter(filter);
 *      cf = cf.and(new EqualToFilter("reviewer", new Long(10000));
 *      reviews = manager.searchReviews(cf.getFilter(), true);
 * </pre>
 * </p>
 *
 * @author woodjhon, icyriver
 * @version 1.0
 */
public class DefaultReviewManager implements ReviewManager {
    /**
     * <p>
     * This variable represents the default namespace of <code>DefaultReviewManager</code> class.
     * </p>
     */
    private static final String DEFAULT_NAMESPACE = DefaultReviewManager.class.getName();

    /**
     * <p>
     * This variable represents the name of persistence property for creating
     * the <code>DefaultReviewManager</code> class.
     * </p>
     */
    private static final String PERSISTENCE_PROPERTY = "persistence";

    /**
     * <p>
     * This variable represents the name of persistence class property for creating
     * the <code>DefaultReviewManager</code> class.
     * </p>
     */
    private static final String PERSISTENCE_CLASS_PROPERTY = "persistence_class";

    /**
     * <p>
     * This variable represents the name of persistence namespace property for creating
     * the <code>DefaultReviewManager</code> class.
     * </p>
     */
    private static final String PERSISTENCE_NAMESPACE_PROPERTY = "persistence_namespace";

    /**
     * <p>
     * This variable represents the <code>ReviewPersistence</code> instance  which performs the
     * persistence functionality for this manager.
     * </p>
     */
    private final ReviewPersistence persistence;

    /**
     * <p>
     * Create the <code>DefaultReviewManager</code> instance from the default namespace.
     * </p>
     *
     * @throws ConfigurationException if any error occurred when creating.
     */
    public DefaultReviewManager() throws ConfigurationException {
        this(DEFAULT_NAMESPACE);
    }

    /**
     * <p>
     * Create the <code>DefaultReviewManager</code> instance from the given namespace.
     * </p>
     *
     * @param namespace the configuration namespace.
     *
     * @throws IllegalArgumentException if namespace is null or empty string.
     * @throws ConfigurationException if any other error occurred when creating.
     */
    public DefaultReviewManager(String namespace) throws ConfigurationException {
        Helper.checkString(namespace, "namespace");

        // get properties and create the persistence.
        Property property = Helper.getProperty(namespace, PERSISTENCE_PROPERTY);
        String psName = Helper.getValue(property, PERSISTENCE_CLASS_PROPERTY, true);
        String psNamespace = Helper.getValue(property, PERSISTENCE_NAMESPACE_PROPERTY, false);
        Object obj = Helper.createObject(psName, psNamespace);

        // check the instance's type.
        if (!(obj instanceof ReviewPersistence)) {
            throw new ConfigurationException("The Class: '" + psName
                + "' isn't the instance of the ReviewPersistence implementation class.");
        }

        // set the persistence here.
        this.persistence = (ReviewPersistence) obj;
    }

    /**
     * <p>
     * Create the <code>DefaultReviewManager</code> instancene with given persistence.
     * </p>
     *
     * @param persistence the persistence to set.
     *
     * @throws IllegalArgumentException if the persistence is null.
     */
    public DefaultReviewManager(ReviewPersistence persistence) {
        Helper.checkNull(persistence, "persistence");
        this.persistence = persistence;
    }

    /**
     * <p>
     * This method will create the review entity in the manager.
     * Here it simply delegates this work to the pluggable persistence.
     * </p>
     *
     * @param review the review entity to be created in the manager.
     * @param operator the operator who creates the review entity.
     *
     * @throws IllegalArgumentException if any argument is null,
     *                                  or operator is empty string,
     *                                  or review fails to pass the validation.
     * @throws ReviewManagementException if failed to create the review entity in the manager.
     */
    public void createReview(Review review, String operator) throws ReviewManagementException {
        persistence.createReview(review, operator);
    }

    /**
     * <p>
     * This method will update the review entity in the manager.
     * Here it simply delegates this work to the pluggable persistence.
     * </p>
     *
     * @param review the review entity to update into the manager.
     * @param operator the operator who updates the review entity.
     *
     * @throws IllegalArgumentException if either of arguments is null,
     *                                  or operator is empty string,
     *                                  or review fails to pass the validation.
     * @throws ReviewManagementException if failed to update the review entity in the manager.
     */
    public void updateReview(Review review, String operator) throws ReviewManagementException {
        persistence.updateReview(review, operator);
    }

    /**
     * <p>
     * This method will get the review entity from the manager with given review entity id.
     * Here it simply delegates this work to the pluggable persistence.
     * </p>
     *
     * @param id the id of the review entity to be retrieved.
     *
     * @return the retrieved review entity with its id.
     *
     * @throws IllegalArgumentException if the given id is not positive.
     * @throws ReviewManagementException if failed to get the review entity from the manager.
     */
    public Review getReview(long id) throws ReviewManagementException {
        return persistence.getReview(id);
    }

    /**
     * <p>
     * This method will search the review entities with the given search filters.
     * Here it simply delegates this work to the pluggable persistence.
     * </p>
     *
     * <p>
     * Five fields supported by the <code>searchReviews</code> method in version 1.0:
     * <ul>
     * <li>
     * scorecardType - the score card type, must be Long type.
     * </li>
     * <li>
     * submission - the review submission id, must be Long type.
     * </li>
     * <li>
     * reviewer - the author of the review, must be Long type.
     * </li>
     * <li>
     * project - the project id of the review, must be Long type.
     * </li>
     * <li>
     * committed --- indicate if the review has been committed,
     * using Integer(1) representing committed, or Integer(0)
     * representing not committed.
     * </li>
     * </ul>
     * </p>
     *
     * @param filter the filter that specifies the search conditions.
     * @param complete a boolean variable indicating if the complete review data is retrieved.
     *
     * @return the array of matching review entities, or empty array if no review entity matches
     *         the filter.
     *
     * @throws IllegalArgumentException if the filter is null.
     * @throws ReviewManagementException if failed to search the review entities from the manager.
     */
    public Review[] searchReviews(Filter filter, boolean complete) throws ReviewManagementException {
        return persistence.searchReviews(filter, complete);
    }

    /**
     * <p>
     * This method will add comment to review with given review id.
     * Here it simply delegates this work to the pluggable persistence.
     * </p>
     *
     * @param reviewId the id of review entity.
     * @param comment the <code>Comment</code> instance to be added.
     * @param operator the operator who adds the comment.
     *
     * @throws IllegalArgumentException if any argument is null, or reviewId is not positive,
     *                                  or operator is empty string.
     * @throws ReviewManagementException if failed to add comment for the review entity in the manager.
     */
    public void addReviewComment(long reviewId, Comment comment, String operator)
        throws ReviewManagementException {
        persistence.addReviewComment(reviewId, comment, operator);
    }

    /**
     * <p>
     * This method will add the comment to the item with given item id.
     * Here it simply delegates this work to the pluggable persistence.
     * </p>
     *
     * @param itemId the item id.
     * @param comment the <code>Comment</code> instance to be added.
     * @param operator the operator who adds the comment.
     *
     * @throws IllegalArgumentException if any argument is null, or itemId is not positive,
     *                                  or operator is empty string.
     * @throws ReviewManagementException if failed to add comment for the item entity in the manager.
     */
    public void addItemComment(long itemId, Comment comment, String operator)
        throws ReviewManagementException {
        persistence.addItemComment(itemId, comment, operator);
    }

    /**
     * <p>
     * This method will get all the <code>CommentType</code> instance from the manager.
     * Here it simply delegates this work to the pluggable persistence.
     * </p>
     *
     * @return the array of all <code>CommentType</code> instances from the persistence,
     *         or empty array if no comment type can be found.
     *
     * @throws ReviewManagementException if failed to get all comment types from manager.
     */
    public CommentType[] getAllCommentTypes() throws ReviewManagementException {
        return persistence.getAllCommentTypes();
    }
}
